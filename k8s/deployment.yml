# Namespace for the authentication application
apiVersion: v1
kind: Namespace
metadata:
  name: auth-app
  labels:
    name: auth-app
---

# ConfigMap for database initialization
apiVersion: v1
kind: ConfigMap
metadata:
  name: mariadb-init-config
  namespace: auth-app
data:
  01-schema.sql: |
    CREATE DATABASE IF NOT EXISTS auth_db;
    USE auth_db;

    CREATE TABLE IF NOT EXISTS users (
        id INT AUTO_INCREMENT PRIMARY KEY,
        email VARCHAR(255) NOT NULL UNIQUE,
        password VARCHAR(255) NOT NULL,
        role ENUM('user', 'vendor') DEFAULT 'user',
        name VARCHAR(100),
        reset_token VARCHAR(255) NULL,
        reset_token_expires BIGINT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    );

    CREATE TABLE IF NOT EXISTS refresh_tokens (
        id INT AUTO_INCREMENT PRIMARY KEY,
        user_id INT NOT NULL,
        token VARCHAR(500) NOT NULL,
        expires_at TIMESTAMP NOT NULL,
        FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
    );
---

# Secret for database credentials
apiVersion: v1
kind: Secret
metadata:
  name: mariadb-secret
  namespace: auth-app
type: Opaque
data:
  # root password (base64 encoded: "root")
  root-password: cm9vdA==
  # database name (base64 encoded: "auth_db")
  database: YXV0aF9kYg==
  # auth user (base64 encoded: "auth_user")
  username: YXV0aF91c2Vy
  # auth password (base64 encoded: "auth_password")
  password: YXV0aF9wYXNzd29yZA==
---

# Secret for JWT
apiVersion: v1
kind: Secret
metadata:
  name: jwt-secret
  namespace: auth-app
type: Opaque
data:
  # JWT secret (base64 encoded: "your-super-secret-jwt-key-change-in-production")
  secret: eW91ci1zdXBlci1zZWNyZXQtand0LWtleS1jaGFuZ2UtaW4tcHJvZHVjdGlvbg==
---

# PersistentVolumeClaim for MariaDB data
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mariadb-pvc
  namespace: auth-app
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: local-path
---

# MariaDB Service
apiVersion: v1
kind: Service
metadata:
  name: mariadb-service
  namespace: auth-app
  labels:
    app: mariadb
spec:
  selector:
    app: mariadb
  ports:
    - port: 3306
      targetPort: 3306
      protocol: TCP
  type: ClusterIP
---

# MariaDB Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mariadb-deployment
  namespace: auth-app
  labels:
    app: mariadb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mariadb
  template:
    metadata:
      labels:
        app: mariadb
    spec:
      containers:
      - name: mariadb
        image: mariadb:11.0
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mariadb-secret
              key: root-password
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: mariadb-secret
              key: database
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mariadb-secret
              key: username
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mariadb-secret
              key: password
        volumeMounts:
        - name: mariadb-storage
          mountPath: /var/lib/mysql
        - name: mariadb-init
          mountPath: /docker-entrypoint-initdb.d
        # Simplified health checks - just check if port is open
        livenessProbe:
          tcpSocket:
            port: 3306
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          tcpSocket:
            port: 3306
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 1
        resources:
          limits:
            memory: "512Mi"
            cpu: "500m"
          requests:
            memory: "256Mi"
            cpu: "250m"
      volumes:
      - name: mariadb-storage
        persistentVolumeClaim:
          claimName: mariadb-pvc
      - name: mariadb-init
        configMap:
          name: mariadb-init-config
---

# Backend Service
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: auth-app
  labels:
    app: backend
spec:
  selector:
    app: backend
  ports:
    - port: 3000
      targetPort: 3000
      protocol: TCP
  type: ClusterIP
---

# Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
  namespace: auth-app
  labels:
    app: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
      - name: backend
        image: node:18-slim
        imagePullPolicy: IfNotPresent
        workingDir: /usr/src/app
        command: ["/bin/sh"]
        args:
          - -c
          - |
            echo "Installing dependencies..."
            npm install express jsonwebtoken bcryptjs dotenv mariadb cors helmet morgan
            echo "Creating app structure..."
            mkdir -p src/routes src/models src/config src/middleware
            echo "Starting backend server..."
            node -e "
            const express = require('express');
            const cors = require('cors');
            const helmet = require('helmet');
            const morgan = require('morgan');
            const app = express();
            const PORT = process.env.PORT || 3000;

            app.use(helmet());
            app.use(cors());
            app.use(morgan('combined'));
            app.use(express.json());

            app.get('/health', (req, res) => {
                res.json({ status: 'OK', message: 'Auth backend is running' });
            });

            app.get('/api/test', (req, res) => {
                res.json({ message: 'Backend API is working!', timestamp: new Date().toISOString() });
            });

            app.listen(PORT, '0.0.0.0', () => {
                console.log('Auth backend server running on port ' + PORT);
            });
            "
        ports:
        - containerPort: 3000
        env:
        - name: NODE_ENV
          value: "production"
        - name: DB_HOST
          value: "mariadb-service"
        - name: DB_USER
          value: "root"
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mariadb-secret
              key: root-password
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: mariadb-secret
              key: database
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: jwt-secret
              key: secret
        - name: PORT
          value: "3000"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
        resources:
          limits:
            memory: "512Mi"
            cpu: "500m"
          requests:
            memory: "256Mi"
            cpu: "250m"
      initContainers:
      - name: wait-for-db
        image: busybox:1.35
        command: ['sh', '-c']
        args:
          - |
            echo "Waiting for MariaDB to be ready..."
            until nc -z mariadb-service 3306; do
              echo "Waiting for MariaDB..."
              sleep 2
            done
            echo "MariaDB is ready!"
---

# Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: auth-app
  labels:
    app: frontend
spec:
  selector:
    app: frontend
  ports:
    - port: 8080
      targetPort: 80
      protocol: TCP
  type: LoadBalancer
---

# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-deployment
  namespace: auth-app
  labels:
    app: frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: frontend
        image: nginx:alpine
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args: ["-c", "echo '<h1>Frontend placeholder - image needs to be built</h1>' > /usr/share/nginx/html/index.html && nginx -g 'daemon off;'"]
        ports:
        - containerPort: 80
        env:
        - name: NODE_ENV
          value: "production"
        - name: API_URL
          value: "http://backend-service:3000"
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
        resources:
          limits:
            memory: "512Mi"
            cpu: "500m"
          requests:
            memory: "256Mi"
            cpu: "250m"
---

# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: auth-app-ingress
  namespace: auth-app
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
spec:
  rules:
  - host: auth-app.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend-service
            port:
              number: 8080
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: backend-service
            port:
              number: 3000
---
