name: üöÄ Frontend CI/CD with ArgoCD Auto-Pull

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'package.json'
      - 'package-lock.json'
      - 'angular.json'
      - 'tsconfig.json'
      - 'Dockerfile'
      - '.github/workflows/frontend-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'package.json'
      - 'package-lock.json'
      - 'angular.json'
      - 'tsconfig.json'
      - 'Dockerfile'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/frontend

jobs:
  frontend-build-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
      security-events: write

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: üè∑Ô∏è Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: üîê Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üèóÔ∏è Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üî® Build and push Frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: üìù Update Helm values for ArgoCD
        if: github.ref == 'refs/heads/main'
        run: |
          echo "‚ÑπÔ∏è Helm values will be updated by full-stack-ci.yml workflow"
          echo "üè∑Ô∏è Frontend image built: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }}"

      - name: üì§ Commit updated manifests for ArgoCD
        if: github.ref == 'refs/heads/main'
        run: |
          echo "‚ÑπÔ∏è Manifest updates handled by full-stack-ci.yml to prevent conflicts"
          echo "‚úÖ Frontend build completed - waiting for consolidated deployment"

      - name: üîç Security scan with Trivy
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: üì§ Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: üì¢ Deployment Summary
        if: github.ref == 'refs/heads/main'
        run: |
          echo "## üöÄ Frontend Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **Frontend image built and pushed successfully**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üì¶ **Image Details:**" >> $GITHUB_STEP_SUMMARY
          echo "- Registry: \`${{ env.REGISTRY }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Repository: \`${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Tags: \`${{ steps.meta.outputs.tags }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üîÑ **ArgoCD Integration:**" >> $GITHUB_STEP_SUMMARY
          echo "- Helm values updated with new image tag" >> $GITHUB_STEP_SUMMARY
          echo "- ArgoCD will automatically detect changes and deploy" >> $GITHUB_STEP_SUMMARY
          echo "- Monitor deployment in ArgoCD UI" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üîó **Next Steps:**" >> $GITHUB_STEP_SUMMARY
          echo "1. ArgoCD will pull the updated manifests" >> $GITHUB_STEP_SUMMARY
          echo "2. New frontend pods will be deployed" >> $GITHUB_STEP_SUMMARY
          echo "3. Rolling update will ensure zero downtime" >> $GITHUB_STEP_SUMMARY

  # Optional: Trigger ArgoCD sync immediately (if ArgoCD API is configured)
  trigger-argocd-sync:
    needs: frontend-build-deploy
    if: github.ref == 'refs/heads/main' && success()
    runs-on: ubuntu-latest
    steps:
      - name: üîÑ Trigger ArgoCD Application Sync
        run: |
          echo "üöÄ ArgoCD will automatically detect the manifest changes"
          echo "üìã Application: auth-stack"
          echo "üîç ArgoCD monitors the repository for changes"
          echo "‚è±Ô∏è Sync will happen within the configured polling interval"
          echo ""
          echo "To manually trigger sync (if ArgoCD CLI is configured):"
          echo "argocd app sync auth-stack --prune"
          
          # Uncomment below if you have ArgoCD API access configured
          # curl -X POST \
          #   -H "Authorization: Bearer ${{ secrets.ARGOCD_TOKEN }}" \
          #   -H "Content-Type: application/json" \
          #   "${{ secrets.ARGOCD_SERVER }}/api/v1/applications/auth-stack/sync" \
          #   -d '{"prune": false, "dryRun": false, "strategy": {"hook": {"force": false}}}'
