name: üöÄ Full Stack CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'backend/**'
      - 'helm/**'
      - '.github/workflows/full-stack-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'backend/**'
      - 'helm/**'

env:
  REGISTRY: ghcr.io
  FRONTEND_IMAGE: ${{ github.repository }}/frontend
  BACKEND_IMAGE: ${{ github.repository }}/backend

jobs:
  detect-changes:
    name: üîç Detect Changes
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      backend-changed: ${{ steps.changes.outputs.backend }}
      helm-changed: ${{ steps.changes.outputs.helm }}
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîç Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'src/**'
              - 'angular.json'
              - 'package.json'
              - 'Dockerfile'
            backend:
              - 'backend/**'
            helm:
              - 'helm/**'

  frontend-build:
    name: üé® Frontend Build & Deploy
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend-changed == 'true'
    
    permissions:
      contents: write
      packages: write
      id-token: write
      security-events: write

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üîß Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üèóÔ∏è Build Angular application
        run: npm run build

      - name: üîê Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üè∑Ô∏è Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-

      - name: üî® Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: üîç Security scan with Trivy (Frontend)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ github.ref_name }}-${{ github.sha }}
          format: 'sarif'
          output: 'trivy-frontend-results.sarif'
        continue-on-error: true

      - name: üìä Upload Frontend Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-frontend-results.sarif'

      - name: ÔøΩ Update Helm values
        if: github.ref == 'refs/heads/main'
        run: |
          NEW_TAG="main-${{ github.sha }}"
          sed -i "/frontend:/,/backend:/ { /tag:/ s|tag: .*|tag: $NEW_TAG|; }" helm/auth-stack/values.yaml

  backend-build:
    name: üîß Backend Build & Deploy
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-changed == 'true'
    
    permissions:
      contents: write
      packages: write
      id-token: write
      security-events: write

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üîß Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: üì¶ Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: üîê Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üè∑Ô∏è Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-

      - name: üî® Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: üîç Security scan with Trivy (Backend)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ github.ref_name }}-${{ github.sha }}
          format: 'sarif'
          output: 'trivy-backend-results.sarif'
        continue-on-error: true

      - name: üìä Upload Backend Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-backend-results.sarif'

      - name: üîÑ Update Helm values
        if: github.ref == 'refs/heads/main'
        run: |
          NEW_TAG="main-${{ github.sha }}"
          sed -i "/backend:/,/mariadb:/ { /tag:/ s|tag: .*|tag: $NEW_TAG|; }" helm/auth-stack/values.yaml

  deploy:
    name: üöÄ Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: [detect-changes, frontend-build, backend-build]
    if: always() && (needs.frontend-build.result == 'success' || needs.frontend-build.result == 'skipped') && (needs.backend-build.result == 'success' || needs.backend-build.result == 'skipped') && (needs.frontend-build.result == 'success' || needs.backend-build.result == 'success' || needs.detect-changes.outputs.helm-changed == 'true')
    
    permissions:
      contents: write

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üîÑ Pull latest changes and handle conflicts
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Pull latest changes with rebase to handle conflicts
          git pull --rebase origin main || {
            echo "‚ö†Ô∏è Merge conflicts detected, resolving..."
            git status
            # Reset to latest main if conflicts are too complex
            git rebase --abort
            git reset --hard origin/main
            git pull origin main
          }

      - name: üîÑ Update Helm values (consolidated)
        if: github.ref == 'refs/heads/main'
        run: |
          UPDATED=false
          
          # Update frontend if it was built
          if [ "${{ needs.frontend-build.result }}" = "success" ]; then
            NEW_TAG="main-${{ github.sha }}"
            sed -i "/frontend:/,/backend:/ { /tag:/ s|tag: .*|tag: $NEW_TAG|; }" helm/auth-stack/values.yaml
            echo "‚úÖ Updated frontend tag to $NEW_TAG"
            UPDATED=true
          fi
          
          # Update backend if it was built
          if [ "${{ needs.backend-build.result }}" = "success" ]; then
            NEW_TAG="main-${{ github.sha }}"
            sed -i "/backend:/,/mariadb:/ { /tag:/ s|tag: .*|tag: $NEW_TAG|; }" helm/auth-stack/values.yaml
            echo "‚úÖ Updated backend tag to $NEW_TAG"
            UPDATED=true
          fi
          
          echo "UPDATED=$UPDATED" >> $GITHUB_ENV

      - name: üì§ Commit updated manifests
        if: github.ref == 'refs/heads/main' && env.UPDATED == 'true'
        run: |
          if git diff --quiet helm/auth-stack/values.yaml; then
            echo "‚ÑπÔ∏è No changes to commit"
          else
            git add helm/auth-stack/values.yaml
            
            # Create comprehensive commit message
            COMMIT_MSG="ü§ñ Update application images to ${{ github.sha }}"
            if [ "${{ needs.frontend-build.result }}" = "success" ]; then
              COMMIT_MSG="$COMMIT_MSG - Frontend"
            fi
            if [ "${{ needs.backend-build.result }}" = "success" ]; then
              COMMIT_MSG="$COMMIT_MSG - Backend"
            fi
            
            git commit -m "$COMMIT_MSG"
            
            # Retry push with exponential backoff
            for i in {1..3}; do
              if git push; then
                echo "‚úÖ Pushed updated manifests - ArgoCD will now pull changes"
                break
              else
                echo "‚ö†Ô∏è Push failed, attempt $i/3. Retrying in $((i*2)) seconds..."
                sleep $((i*2))
                git pull --rebase origin main
              fi
            done
          fi

      - name: üîç Verify ArgoCD Sync (if available)
        if: github.ref == 'refs/heads/main' && env.UPDATED == 'true'
        continue-on-error: true
        run: |
          echo "üîç Checking if ArgoCD applications exist..."
          
          # Wait for ArgoCD to detect changes (30 seconds)
          sleep 30
          
          # Check if kubectl is available and cluster is accessible
          if command -v kubectl &> /dev/null; then
            echo "üìä Checking ArgoCD application status..."
            
            # Check if ArgoCD namespace exists
            if kubectl get namespace argocd &> /dev/null; then
              # Check application sync status
              kubectl get applications -n argocd -o wide || echo "‚ö†Ô∏è ArgoCD applications not found"
            else
              echo "‚ÑπÔ∏è ArgoCD not installed - manual deployment required"
            fi
          else
            echo "‚ÑπÔ∏è kubectl not available - cannot verify ArgoCD sync"
          fi

      - name: üö® Rollback on Failure
        if: failure() && github.ref == 'refs/heads/main'
        run: |
          echo "üö® Deployment failed - attempting rollback..."
          
          # Get the previous commit
          PREV_COMMIT=$(git log --oneline -n 2 | tail -1 | cut -d' ' -f1)
          
          if [ ! -z "$PREV_COMMIT" ]; then
            echo "üîÑ Rolling back to commit: $PREV_COMMIT"
            
            # Reset helm values to previous state
            git checkout $PREV_COMMIT -- helm/auth-stack/values.yaml
            
            # Commit rollback
            git add helm/auth-stack/values.yaml
            git commit -m "üö® Rollback: Deployment failed for ${{ github.sha }}"
            git push
            
            echo "‚úÖ Rollback completed"
          else
            echo "‚ùå Cannot determine previous commit for rollback"
          fi
