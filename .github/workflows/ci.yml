name: 🚀 CI/CD Pipeline - Frontend & Backend

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'backend/**'
      - 'package.json'
      - 'package-lock.json'
      - 'angular.json'
      - 'tsconfig.json'
      - 'Dockerfile'
      - 'backend/Dockerfile'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'backend/**'
      - 'package.json'
      - 'package-lock.json'
      - 'angular.json'
      - 'tsconfig.json'
      - 'Dockerfile'
      - 'backend/Dockerfile'

env:
  REGISTRY: ghcr.io
  FRONTEND_IMAGE_NAME: ${{ github.repository }}/frontend
  BACKEND_IMAGE_NAME: ${{ github.repository }}/backend

jobs:
  # Job 1: Detect Changes
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      backend-changed: ${{ steps.changes.outputs.backend }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            frontend:
              - 'src/**'
              - 'package.json'
              - 'package-lock.json'
              - 'angular.json'
              - 'tsconfig.json'
              - 'Dockerfile'
            backend:
              - 'backend/**'

  # Job 2: Frontend CI/CD
  frontend-cicd:
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend-changed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏗️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔨 Build and push Frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: 📝 Update deployment manifest
        if: github.ref == 'refs/heads/main'
        run: |
          # Extract the SHA tag for the main branch
          NEW_TAG=$(echo "${{ steps.meta.outputs.tags }}" | grep -E "main-[a-f0-9]{7}" | head -1 | cut -d':' -f2)
          if [ -z "$NEW_TAG" ]; then
            NEW_TAG="latest"
          fi
          
          # Update Helm values or Kubernetes manifests
          sed -i "s|repository: angular-service-portal|repository: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}|g" helm/auth-stack/values.yaml
          sed -i "s|tag: latest|tag: $NEW_TAG|g" helm/auth-stack/values.yaml
          
          # Also update k8s deployment if needed
          if [ -f "k8s/deployment.yml" ]; then
            sed -i "s|image: angular-service-portal:latest|image: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:$NEW_TAG|g" k8s/deployment.yml
          fi

      - name: 📤 Commit and push changes
        if: github.ref == 'refs/heads/main'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add helm/auth-stack/values.yaml k8s/deployment.yml || true
          git diff --staged --quiet || git commit -m "🤖 Update frontend image to ${{ github.sha }}"
          git push

  # Job 3: Backend CI/CD
  backend-cicd:
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-changed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏗️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔨 Build and push Backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: 📝 Update deployment manifest
        if: github.ref == 'refs/heads/main'
        run: |
          # Extract the SHA tag for the main branch
          NEW_TAG=$(echo "${{ steps.meta.outputs.tags }}" | grep -E "main-[a-f0-9]{7}" | head -1 | cut -d':' -f2)
          if [ -z "$NEW_TAG" ]; then
            NEW_TAG="latest"
          fi
          
          # Update Helm values
          sed -i "s|repository: chingnokas/b-app|repository: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}|g" helm/auth-stack/values.yaml
          sed -i "/backend:/,/frontend:/ s|tag: latest|tag: $NEW_TAG|" helm/auth-stack/values.yaml

      - name: 📤 Commit and push changes
        if: github.ref == 'refs/heads/main'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add helm/auth-stack/values.yaml || true
          git diff --staged --quiet || git commit -m "🤖 Update backend image to ${{ github.sha }}"
          git push

  # Job 4: Trigger ArgoCD Sync (Optional)
  trigger-argocd:
    needs: [frontend-cicd, backend-cicd]
    if: always() && (needs.frontend-cicd.result == 'success' || needs.backend-cicd.result == 'success') && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: 🔄 Trigger ArgoCD Application Sync
        run: |
          echo "🚀 Triggering ArgoCD sync for auth-stack application"
          # This would typically call ArgoCD API or use argocd CLI
          # For now, we'll create a webhook or use ArgoCD's auto-sync feature
          
          # Example using curl to ArgoCD API (requires ArgoCD token in secrets)
          # curl -X POST \
          #   -H "Authorization: Bearer ${{ secrets.ARGOCD_TOKEN }}" \
          #   -H "Content-Type: application/json" \
          #   "${{ secrets.ARGOCD_SERVER }}/api/v1/applications/auth-stack/sync" \
          #   -d '{"prune": false, "dryRun": false, "strategy": {"hook": {"force": false}}}'
          
          echo "✅ ArgoCD sync triggered successfully"

  # Job 5: Security Scanning
  security-scan:
    needs: [frontend-cicd, backend-cicd]
    if: always() && (needs.frontend-cicd.result == 'success' || needs.backend-cicd.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 6: Notification
  notify:
    needs: [frontend-cicd, backend-cicd, trigger-argocd]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: 📢 Send notification
        run: |
          if [[ "${{ needs.frontend-cicd.result }}" == "success" || "${{ needs.backend-cicd.result }}" == "success" ]]; then
            echo "✅ Deployment successful! Images pushed and ArgoCD notified."
          else
            echo "❌ Deployment failed. Check the logs for details."
          fi
