name: 🚀 Full Stack Deploy (Infrastructure First)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      action:
        description: 'Action'
        required: true
        default: 'deploy'
        type: choice
        options:
        - deploy
        - destroy

env:
  TF_VAR_do_token: ${{ secrets.DIGITALOCEAN_TOKEN }}

jobs:
  # Job 1: Create Infrastructure with OpenTofu
  infrastructure:
    name: 🏗️ Infrastructure (${{ github.event.inputs.environment }})
    runs-on: ubuntu-latest
    timeout-minutes: 20
    outputs:
      cluster_id: ${{ steps.cluster_info.outputs.cluster_id }}
      cluster_name: ${{ steps.cluster_info.outputs.cluster_name }}
      cluster_endpoint: ${{ steps.cluster_info.outputs.cluster_endpoint }}
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: 1.8.2

      - name: 🔐 Verify Token
        run: |
          if [ -z "$TF_VAR_do_token" ]; then
            echo "❌ DigitalOcean token not found"
            exit 1
          fi
          echo "✅ DigitalOcean token verified"

      - name: 🏗️ Initialize OpenTofu
        working-directory: infrastructure
        run: |
          echo "🔧 Initializing OpenTofu..."
          timeout 120s tofu init -no-color -input=false
          echo "✅ OpenTofu initialized"

      - name: ✅ Validate Configuration
        working-directory: infrastructure
        run: |
          echo "✅ Validating configuration..."
          tofu validate

      - name: 📋 Plan Infrastructure
        if: github.event.inputs.action == 'deploy'
        working-directory: infrastructure
        run: |
          echo "📋 Planning infrastructure for ${{ github.event.inputs.environment }}..."
          
          # Set variables based on environment
          if [ "${{ github.event.inputs.environment }}" = "production" ]; then
            NODE_COUNT=3
            NODE_SIZE="s-4vcpu-8gb"
          else
            NODE_COUNT=2
            NODE_SIZE="s-2vcpu-4gb"
          fi
          
          tofu plan -no-color \
            -var="cluster_name=auth-stack-${{ github.event.inputs.environment }}" \
            -var="node_count=${NODE_COUNT}" \
            -var="node_size=${NODE_SIZE}" \
            -var="region=nyc1" \
            -out=tfplan

      - name: 🚀 Apply Infrastructure
        if: github.event.inputs.action == 'deploy'
        working-directory: infrastructure
        run: |
          echo "🚀 Creating infrastructure..."
          tofu apply -auto-approve -no-color tfplan
          echo "✅ Infrastructure created successfully"

      - name: 📤 Get Cluster Info
        if: github.event.inputs.action == 'deploy'
        id: cluster_info
        working-directory: infrastructure
        run: |
          echo "📤 Getting cluster information..."
          
          CLUSTER_ID=$(tofu output -raw cluster_id)
          CLUSTER_NAME=$(tofu output -raw cluster_name)
          CLUSTER_ENDPOINT=$(tofu output -raw cluster_endpoint)
          
          echo "cluster_id=${CLUSTER_ID}" >> $GITHUB_OUTPUT
          echo "cluster_name=${CLUSTER_NAME}" >> $GITHUB_OUTPUT
          echo "cluster_endpoint=${CLUSTER_ENDPOINT}" >> $GITHUB_OUTPUT
          
          echo "✅ Cluster ID: ${CLUSTER_ID}"
          echo "✅ Cluster Name: ${CLUSTER_NAME}"

      - name: 💥 Destroy Infrastructure
        if: github.event.inputs.action == 'destroy'
        working-directory: infrastructure
        run: |
          echo "💥 Destroying infrastructure..."
          
          if [ "${{ github.event.inputs.environment }}" = "production" ]; then
            NODE_COUNT=3
            NODE_SIZE="s-4vcpu-8gb"
          else
            NODE_COUNT=2
            NODE_SIZE="s-2vcpu-4gb"
          fi
          
          tofu destroy -auto-approve -no-color \
            -var="cluster_name=auth-stack-${{ github.event.inputs.environment }}" \
            -var="node_count=${NODE_COUNT}" \
            -var="node_size=${NODE_SIZE}" \
            -var="region=nyc1"
          
          echo "✅ Infrastructure destroyed"

  # Job 2: Wait for Cluster to be Ready
  wait-for-cluster:
    name: ⏳ Wait for Cluster Ready
    runs-on: ubuntu-latest
    needs: infrastructure
    if: github.event.inputs.action == 'deploy'
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Tools
        run: |
          # Install doctl
          curl -sL https://github.com/digitalocean/doctl/releases/download/v1.104.0/doctl-1.104.0-linux-amd64.tar.gz | tar -xzv
          sudo mv doctl /usr/local/bin
          
          # Configure doctl
          doctl auth init -t ${{ secrets.DIGITALOCEAN_TOKEN }}

      - name: ⏳ Wait for Cluster Ready
        run: |
          echo "⏳ Waiting for cluster to be ready..."
          CLUSTER_ID="${{ needs.infrastructure.outputs.cluster_id }}"
          
          # Wait up to 8 minutes for cluster to be ready
          for i in {1..48}; do
            STATUS=$(doctl kubernetes cluster get $CLUSTER_ID --format Status --no-header)
            echo "Attempt $i/48: Cluster status is: $STATUS"
            
            if [ "$STATUS" = "running" ]; then
              echo "✅ Cluster is ready!"
              break
            fi
            
            if [ $i -eq 48 ]; then
              echo "❌ Cluster did not become ready in time"
              exit 1
            fi
            
            sleep 10
          done

      - name: 🧪 Test Cluster Connection
        run: |
          echo "🧪 Testing cluster connection..."
          CLUSTER_ID="${{ needs.infrastructure.outputs.cluster_id }}"
          
          # Get kubeconfig
          doctl kubernetes cluster kubeconfig save $CLUSTER_ID
          
          # Test connection
          kubectl version --client
          kubectl get nodes
          kubectl cluster-info
          
          # Wait for nodes to be ready
          echo "⏳ Waiting for nodes to be ready..."
          kubectl wait --for=condition=Ready nodes --all --timeout=300s
          
          echo "✅ Cluster is fully ready for deployments"

  # Job 3: Deploy Applications (Priority - Deploy First)
  deploy-applications:
    name: 🎯 Deploy Applications
    runs-on: ubuntu-latest
    needs: [infrastructure, wait-for-cluster]
    if: github.event.inputs.action == 'deploy'
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Tools
        run: |
          # Install doctl and get kubeconfig
          curl -sL https://github.com/digitalocean/doctl/releases/download/v1.104.0/doctl-1.104.0-linux-amd64.tar.gz | tar -xzv
          sudo mv doctl /usr/local/bin
          doctl auth init -t ${{ secrets.DIGITALOCEAN_TOKEN }}

          CLUSTER_ID="${{ needs.infrastructure.outputs.cluster_id }}"
          doctl kubernetes cluster kubeconfig save $CLUSTER_ID

      - name: 🔧 Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.14.0'

      - name: 🎯 Deploy Auth Stack
        run: |
          echo "🎯 Deploying auth-stack application..."

          helm upgrade --install auth-stack helm/auth-stack \
            --namespace auth-app \
            --create-namespace \
            --set monitoring.enabled=true \
            --set environment="${{ github.event.inputs.environment }}" \
            --wait \
            --timeout 8m

          echo "✅ Auth-stack deployed"

      - name: 🔍 Verify Applications
        run: |
          echo "🔍 Verifying application deployment..."

          # Check application pods
          kubectl get pods -n auth-app

          # Wait for applications to be ready
          kubectl wait --for=condition=Ready pods -l app=backend -n auth-app --timeout=300s
          kubectl wait --for=condition=Ready pods -l app=frontend -n auth-app --timeout=300s

          echo "✅ Applications are ready"

  # Job 4: Deploy Monitoring (Parallel with Applications)
  deploy-monitoring:
    name: 📊 Deploy Monitoring
    runs-on: ubuntu-latest
    needs: [infrastructure, wait-for-cluster]
    if: github.event.inputs.action == 'deploy'
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Tools
        run: |
          # Install doctl
          curl -sL https://github.com/digitalocean/doctl/releases/download/v1.104.0/doctl-1.104.0-linux-amd64.tar.gz | tar -xzv
          sudo mv doctl /usr/local/bin
          doctl auth init -t ${{ secrets.DIGITALOCEAN_TOKEN }}

          # Get kubeconfig
          CLUSTER_ID="${{ needs.infrastructure.outputs.cluster_id }}"
          doctl kubernetes cluster kubeconfig save $CLUSTER_ID

      - name: 🔧 Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.14.0'

      - name: 📊 Deploy Monitoring Stack
        run: |
          echo "📊 Deploying monitoring stack..."

          # Add Helm repositories
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo update

          # Deploy monitoring
          helm upgrade --install monitoring-stack helm/monitoring-stack \
            --namespace monitoring \
            --create-namespace \
            --wait \
            --timeout 10m

          echo "✅ Monitoring stack deployed"

      - name: 🔍 Verify Monitoring
        run: |
          echo "🔍 Verifying monitoring deployment..."

          # Check monitoring pods
          kubectl get pods -n monitoring

          # Wait for monitoring to be ready
          kubectl wait --for=condition=Ready pods -l app.kubernetes.io/name=prometheus -n monitoring --timeout=300s
          kubectl wait --for=condition=Ready pods -l app.kubernetes.io/name=grafana -n monitoring --timeout=300s

          echo "✅ Monitoring is ready"
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Tools
        run: |
          # Install doctl and get kubeconfig
          curl -sL https://github.com/digitalocean/doctl/releases/download/v1.104.0/doctl-1.104.0-linux-amd64.tar.gz | tar -xzv
          sudo mv doctl /usr/local/bin
          doctl auth init -t ${{ secrets.DIGITALOCEAN_TOKEN }}
          
          CLUSTER_ID="${{ needs.infrastructure.outputs.cluster_id }}"
          doctl kubernetes cluster kubeconfig save $CLUSTER_ID

      - name: 🔧 Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.14.0'

      - name: 🎯 Deploy Auth Stack
        run: |
          echo "🎯 Deploying auth-stack application..."
          
          helm upgrade --install auth-stack helm/auth-stack \
            --namespace auth-app \
            --create-namespace \
            --set monitoring.enabled=true \
            --set environment="${{ github.event.inputs.environment }}" \
            --wait \
            --timeout 8m
          
          echo "✅ Auth-stack deployed"

      - name: 🔍 Verify Applications
        run: |
          echo "🔍 Verifying application deployment..."
          
          # Check application pods
          kubectl get pods -n auth-app
          
          # Wait for applications to be ready
          kubectl wait --for=condition=Ready pods -l app=backend -n auth-app --timeout=300s
          kubectl wait --for=condition=Ready pods -l app=frontend -n auth-app --timeout=300s
          
          echo "✅ Applications are ready"

  # Job 5: Final Verification
  verify-deployment:
    name: ✅ Verify Full Stack
    runs-on: ubuntu-latest
    needs: [infrastructure, wait-for-cluster, deploy-applications, deploy-monitoring]
    if: github.event.inputs.action == 'deploy'
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Tools
        run: |
          curl -sL https://github.com/digitalocean/doctl/releases/download/v1.104.0/doctl-1.104.0-linux-amd64.tar.gz | tar -xzv
          sudo mv doctl /usr/local/bin
          doctl auth init -t ${{ secrets.DIGITALOCEAN_TOKEN }}
          
          CLUSTER_ID="${{ needs.infrastructure.outputs.cluster_id }}"
          doctl kubernetes cluster kubeconfig save $CLUSTER_ID

      - name: ✅ Final Verification
        run: |
          echo "✅ Running final verification..."
          
          echo "📊 Cluster Status:"
          kubectl get nodes
          
          echo "📊 Monitoring Status:"
          kubectl get pods -n monitoring
          
          echo "📊 Application Status:"
          kubectl get pods -n auth-app
          
          echo "📊 Services:"
          kubectl get svc -n monitoring
          kubectl get svc -n auth-app
          
          echo "✅ Full stack verification complete"

      - name: 📊 Deployment Summary
        run: |
          echo "## 🎉 Full Stack Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Cluster:** ${{ needs.infrastructure.outputs.cluster_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ✅ All components deployed and verified" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🏗️ **Infrastructure:** ✅ Ready" >> $GITHUB_STEP_SUMMARY
          echo "📊 **Monitoring:** ✅ Prometheus + Grafana deployed" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **Applications:** ✅ Auth-stack deployed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Access Instructions:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Get kubeconfig" >> $GITHUB_STEP_SUMMARY
          echo "doctl kubernetes cluster kubeconfig save ${{ needs.infrastructure.outputs.cluster_id }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Access Grafana" >> $GITHUB_STEP_SUMMARY
          echo "kubectl port-forward -n monitoring svc/monitoring-stack-grafana 3001:80" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Access your app" >> $GITHUB_STEP_SUMMARY
          echo "kubectl port-forward -n auth-app svc/frontend-service 8080:8080" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "💰 **Cost:** Remember to destroy when done testing!" >> $GITHUB_STEP_SUMMARY
