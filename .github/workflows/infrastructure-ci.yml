name: 🏗️ Infrastructure CI/CD with OpenTofu

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'infrastructure/**'
      - 'helm/**'
      - 'monitoring/**'
      - '.github/workflows/infrastructure-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'infrastructure/**'
      - 'helm/**'
      - 'monitoring/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      action:
        description: 'Action to perform'
        required: true
        default: 'apply'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: "1.6.0"
  TOFU_VERSION: "1.6.0"

jobs:
  detect-changes:
    name: 🔍 Detect Infrastructure Changes
    runs-on: ubuntu-latest
    outputs:
      infrastructure-changed: ${{ steps.changes.outputs.infrastructure }}
      monitoring-changed: ${{ steps.changes.outputs.monitoring }}
      helm-changed: ${{ steps.changes.outputs.helm }}
      environment: ${{ steps.env.outputs.environment }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            infrastructure:
              - 'infrastructure/**'
            monitoring:
              - 'monitoring/**'
            helm:
              - 'helm/**'

      - name: 🌍 Determine environment
        id: env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi

  validate-infrastructure:
    name: 🔍 Validate OpenTofu Configuration
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.infrastructure-changed == 'true' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: ${{ env.TOFU_VERSION }}

      - name: 🔍 Format check
        working-directory: ./infrastructure
        run: tofu fmt -check -recursive

      - name: 🔧 Initialize OpenTofu
        working-directory: ./infrastructure
        run: tofu init
        env:
          DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}

      - name: ✅ Validate configuration
        working-directory: ./infrastructure
        run: tofu validate

      - name: 🔒 Security scan with tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: ./infrastructure
          soft_fail: true

  plan-infrastructure:
    name: 📋 Plan Infrastructure Changes
    runs-on: ubuntu-latest
    needs: [detect-changes, validate-infrastructure]
    if: needs.detect-changes.outputs.infrastructure-changed == 'true' || github.event_name == 'workflow_dispatch'
    
    environment:
      name: ${{ needs.detect-changes.outputs.environment }}
      url: https://cloud.digitalocean.com/kubernetes/clusters
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: ${{ env.TOFU_VERSION }}

      - name: 🔧 Initialize OpenTofu
        working-directory: ./infrastructure
        run: tofu init
        env:
          DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}

      - name: 📋 Plan infrastructure changes
        working-directory: ./infrastructure
        run: |
          tofu plan \
            -var-file="environments/${{ needs.detect-changes.outputs.environment }}.tfvars" \
            -var="do_token=${{ secrets.DIGITALOCEAN_TOKEN }}" \
            -out=tfplan-${{ needs.detect-changes.outputs.environment }}
        env:
          DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}

      - name: 📤 Upload plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ needs.detect-changes.outputs.environment }}
          path: infrastructure/tfplan-${{ needs.detect-changes.outputs.environment }}
          retention-days: 5

      - name: 💬 Comment plan on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');
            
            // Get plan output
            const planOutput = execSync('cd infrastructure && tofu show -no-color tfplan-${{ needs.detect-changes.outputs.environment }}', { encoding: 'utf8' });
            
            const comment = `## 🏗️ Infrastructure Plan - ${{ needs.detect-changes.outputs.environment }}
            
            <details>
            <summary>📋 OpenTofu Plan Output</summary>
            
            \`\`\`
            ${planOutput}
            \`\`\`
            </details>
            
            **Environment:** ${{ needs.detect-changes.outputs.environment }}
            **Action:** Plan completed successfully
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  apply-infrastructure:
    name: 🚀 Apply Infrastructure Changes
    runs-on: ubuntu-latest
    needs: [detect-changes, plan-infrastructure]
    if: |
      (needs.detect-changes.outputs.infrastructure-changed == 'true' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    
    environment:
      name: ${{ needs.detect-changes.outputs.environment }}
      url: https://cloud.digitalocean.com/kubernetes/clusters
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: ${{ env.TOFU_VERSION }}

      - name: 📥 Download plan artifact
        uses: actions/download-artifact@v4
        with:
          name: tfplan-${{ needs.detect-changes.outputs.environment }}
          path: infrastructure/

      - name: 🔧 Initialize OpenTofu
        working-directory: ./infrastructure
        run: tofu init
        env:
          DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}

      - name: 🚀 Apply infrastructure changes
        working-directory: ./infrastructure
        run: tofu apply -auto-approve tfplan-${{ needs.detect-changes.outputs.environment }}
        env:
          DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}

      - name: 📤 Export cluster configuration
        working-directory: ./infrastructure
        run: |
          # Get cluster info
          CLUSTER_ID=$(tofu output -raw cluster_id)
          CLUSTER_NAME=$(tofu output -raw cluster_name)
          
          # Save cluster info
          echo "CLUSTER_ID=$CLUSTER_ID" >> $GITHUB_ENV
          echo "CLUSTER_NAME=$CLUSTER_NAME" >> $GITHUB_ENV
          
          # Export kubeconfig
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.DIGITALOCEAN_TOKEN }}" \
            "https://api.digitalocean.com/v2/kubernetes/clusters/$CLUSTER_ID/kubeconfig" \
            | jq -r '.kubeconfig' | base64 -d > kubeconfig-${{ needs.detect-changes.outputs.environment }}.yaml
        env:
          DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}

      - name: 📤 Upload kubeconfig artifact
        uses: actions/upload-artifact@v4
        with:
          name: kubeconfig-${{ needs.detect-changes.outputs.environment }}
          path: infrastructure/kubeconfig-${{ needs.detect-changes.outputs.environment }}.yaml
          retention-days: 1

      - name: ⏳ Wait for cluster to be ready
        run: |
          echo "⏳ Waiting for cluster to be fully ready..."
          sleep 60
          
          # Test cluster connectivity
          kubectl --kubeconfig=infrastructure/kubeconfig-${{ needs.detect-changes.outputs.environment }}.yaml cluster-info
          kubectl --kubeconfig=infrastructure/kubeconfig-${{ needs.detect-changes.outputs.environment }}.yaml get nodes

  deploy-monitoring:
    name: 📊 Deploy Monitoring Stack
    runs-on: ubuntu-latest
    needs: [detect-changes, apply-infrastructure]
    if: |
      always() && 
      (needs.apply-infrastructure.result == 'success' || 
       (needs.detect-changes.outputs.monitoring-changed == 'true' && github.ref == 'refs/heads/main'))
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📥 Download kubeconfig
        uses: actions/download-artifact@v4
        with:
          name: kubeconfig-${{ needs.detect-changes.outputs.environment }}
          path: ./

      - name: 🔧 Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.14.0'

      - name: 📊 Add monitoring Helm repositories
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo update

      - name: 🏗️ Create monitoring namespace
        run: |
          kubectl --kubeconfig=kubeconfig-${{ needs.detect-changes.outputs.environment }}.yaml \
            create namespace monitoring --dry-run=client -o yaml | \
            kubectl --kubeconfig=kubeconfig-${{ needs.detect-changes.outputs.environment }}.yaml apply -f -

      - name: 📊 Deploy Prometheus and Grafana
        run: |
          helm --kubeconfig=kubeconfig-${{ needs.detect-changes.outputs.environment }}.yaml \
            upgrade --install monitoring-stack prometheus-community/kube-prometheus-stack \
            --namespace monitoring \
            --values helm/monitoring-stack/values.yaml \
            --set grafana.adminPassword=${{ secrets.GRAFANA_ADMIN_PASSWORD || 'admin123' }} \
            --wait --timeout=10m

      - name: 🔍 Verify monitoring deployment
        run: |
          kubectl --kubeconfig=kubeconfig-${{ needs.detect-changes.outputs.environment }}.yaml \
            get pods -n monitoring
          
          echo "📊 Monitoring stack deployed successfully!"
          echo "🔗 Grafana will be available via LoadBalancer IP"

  deploy-argocd:
    name: 🔄 Deploy ArgoCD
    runs-on: ubuntu-latest
    needs: [detect-changes, apply-infrastructure, deploy-monitoring]
    if: always() && needs.apply-infrastructure.result == 'success'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📥 Download kubeconfig
        uses: actions/download-artifact@v4
        with:
          name: kubeconfig-${{ needs.detect-changes.outputs.environment }}
          path: ./

      - name: 🔧 Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.14.0'

      - name: 🔄 Add ArgoCD Helm repository
        run: |
          helm repo add argo https://argoproj.github.io/argo-helm
          helm repo update

      - name: 🏗️ Create ArgoCD namespace
        run: |
          kubectl --kubeconfig=kubeconfig-${{ needs.detect-changes.outputs.environment }}.yaml \
            create namespace argocd --dry-run=client -o yaml | \
            kubectl --kubeconfig=kubeconfig-${{ needs.detect-changes.outputs.environment }}.yaml apply -f -

      - name: 🔄 Deploy ArgoCD
        run: |
          helm --kubeconfig=kubeconfig-${{ needs.detect-changes.outputs.environment }}.yaml \
            upgrade --install argocd argo/argo-cd \
            --namespace argocd \
            --set server.service.type=LoadBalancer \
            --set server.service.annotations."service\.beta\.kubernetes\.io/do-loadbalancer-name"="argocd-server" \
            --set server.service.annotations."service\.beta\.kubernetes\.io/do-loadbalancer-size-slug"="lb-small" \
            --wait --timeout=10m

      - name: 🔄 Configure ArgoCD project and application
        run: |
          # Wait for ArgoCD to be ready
          kubectl --kubeconfig=kubeconfig-${{ needs.detect-changes.outputs.environment }}.yaml \
            wait --for=condition=available --timeout=300s deployment/argocd-server -n argocd
          
          # Apply ArgoCD project and application
          kubectl --kubeconfig=kubeconfig-${{ needs.detect-changes.outputs.environment }}.yaml \
            apply -f argocd/project.yaml
          
          kubectl --kubeconfig=kubeconfig-${{ needs.detect-changes.outputs.environment }}.yaml \
            apply -f argocd/application.yaml

      - name: 🔍 Get ArgoCD access information
        run: |
          echo "🔄 ArgoCD deployed successfully!"
          echo ""
          echo "📋 Access Information:"
          echo "🔗 ArgoCD UI will be available via LoadBalancer IP"
          echo "👤 Username: admin"
          echo "🔑 Password: Get with this command:"
          echo "kubectl --kubeconfig=kubeconfig-${{ needs.detect-changes.outputs.environment }}.yaml -n argocd get secret argocd-initial-admin-secret -o jsonpath='{.data.password}' | base64 -d"

  deploy-applications:
    name: 🚀 Deploy Applications with Helm
    runs-on: ubuntu-latest
    needs: [detect-changes, apply-infrastructure, deploy-monitoring, deploy-argocd]
    if: always() && needs.apply-infrastructure.result == 'success'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📥 Download kubeconfig
        uses: actions/download-artifact@v4
        with:
          name: kubeconfig-${{ needs.detect-changes.outputs.environment }}
          path: ./

      - name: 🔧 Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.14.0'

      - name: 🏗️ Create application namespace
        run: |
          kubectl --kubeconfig=kubeconfig-${{ needs.detect-changes.outputs.environment }}.yaml \
            create namespace auth-app --dry-run=client -o yaml | \
            kubectl --kubeconfig=kubeconfig-${{ needs.detect-changes.outputs.environment }}.yaml apply -f -

      - name: 🔐 Create image pull secret
        run: |
          kubectl --kubeconfig=kubeconfig-${{ needs.detect-changes.outputs.environment }}.yaml \
            create secret docker-registry ghcr-secret \
            --namespace=auth-app \
            --docker-server=ghcr.io \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.GITHUB_TOKEN }} \
            --dry-run=client -o yaml | \
            kubectl --kubeconfig=kubeconfig-${{ needs.detect-changes.outputs.environment }}.yaml apply -f -

      - name: 🚀 Deploy auth-stack application
        run: |
          helm --kubeconfig=kubeconfig-${{ needs.detect-changes.outputs.environment }}.yaml \
            upgrade --install auth-stack ./helm/auth-stack \
            --namespace auth-app \
            --values helm/auth-stack/values-${{ needs.detect-changes.outputs.environment }}.yaml \
            --set global.environment=${{ needs.detect-changes.outputs.environment }} \
            --wait --timeout=10m

      - name: 🔍 Verify application deployment
        run: |
          kubectl --kubeconfig=kubeconfig-${{ needs.detect-changes.outputs.environment }}.yaml \
            get pods -n auth-app
          
          kubectl --kubeconfig=kubeconfig-${{ needs.detect-changes.outputs.environment }}.yaml \
            get services -n auth-app
          
          echo "🚀 Applications deployed successfully!"

  deployment-summary:
    name: 📋 Deployment Summary
    runs-on: ubuntu-latest
    needs: [detect-changes, apply-infrastructure, deploy-monitoring, deploy-argocd, deploy-applications]
    if: always()
    
    steps:
      - name: 📋 Generate deployment summary
        run: |
          echo "## 🏗️ Infrastructure Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ needs.detect-changes.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Cluster:** auth-stack-${{ needs.detect-changes.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📊 Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Infrastructure | ${{ needs.apply-infrastructure.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Monitoring | ${{ needs.deploy-monitoring.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| ArgoCD | ${{ needs.deploy-argocd.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Applications | ${{ needs.deploy-applications.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 🔗 Access Information" >> $GITHUB_STEP_SUMMARY
          echo "- **DigitalOcean Console:** [Kubernetes Clusters](https://cloud.digitalocean.com/kubernetes/clusters)" >> $GITHUB_STEP_SUMMARY
          echo "- **Grafana:** Available via LoadBalancer IP (monitoring namespace)" >> $GITHUB_STEP_SUMMARY
          echo "- **ArgoCD:** Available via LoadBalancer IP (argocd namespace)" >> $GITHUB_STEP_SUMMARY
          echo "- **Application:** Available via LoadBalancer IP (auth-app namespace)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 🔧 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Get LoadBalancer IPs: \`kubectl get services --all-namespaces\`" >> $GITHUB_STEP_SUMMARY
          echo "2. Access Grafana with admin credentials" >> $GITHUB_STEP_SUMMARY
          echo "3. Access ArgoCD and sync applications" >> $GITHUB_STEP_SUMMARY
          echo "4. Monitor application health in dashboards" >> $GITHUB_STEP_SUMMARY

  destroy-infrastructure:
    name: 🗑️ Destroy Infrastructure
    runs-on: ubuntu-latest
    needs: [detect-changes]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    
    environment:
      name: ${{ needs.detect-changes.outputs.environment }}
      url: https://cloud.digitalocean.com/kubernetes/clusters
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: ${{ env.TOFU_VERSION }}

      - name: 🔧 Initialize OpenTofu
        working-directory: ./infrastructure
        run: tofu init
        env:
          DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}

      - name: 🗑️ Destroy infrastructure
        working-directory: ./infrastructure
        run: |
          tofu destroy \
            -var-file="environments/${{ needs.detect-changes.outputs.environment }}.tfvars" \
            -var="do_token=${{ secrets.DIGITALOCEAN_TOKEN }}" \
            -auto-approve
        env:
          DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}

      - name: 📋 Destruction summary
        run: |
          echo "🗑️ Infrastructure destroyed successfully!"
          echo "Environment: ${{ needs.detect-changes.outputs.environment }}"