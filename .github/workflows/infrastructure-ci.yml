name: 🏗️ Infrastructure CI/CD with OpenTofu

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'infrastructure/**'
      - '.github/workflows/infrastructure-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'infrastructure/**'
  workflow_dispatch:
    inputs:
      action:
        description: 'Infrastructure Action'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy
      environment:
        description: 'Target Environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  TF_VERSION: "1.8.0"
  TOFU_VERSION: "1.8.2"
  DO_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
  TF_VAR_do_token: ${{ secrets.DIGITALOCEAN_TOKEN }}

jobs:
  validate:
    name: 🔍 Validate Infrastructure Code
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: ${{ env.TOFU_VERSION }}

      - name: 🔍 Format check
        run: |
          cd infrastructure
          tofu fmt -check -recursive
        continue-on-error: true

      - name: ✅ Validate configuration
        run: |
          cd infrastructure
          tofu init -backend=false
          tofu validate

      - name: 🔒 Security scan with tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: infrastructure
          soft_fail: true

  plan:
    name: 📋 Plan Infrastructure Changes
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan')
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: ${{ env.TOFU_VERSION }}

      - name: 🏗️ Initialize OpenTofu
        run: |
          cd infrastructure
          tofu init

      - name: 📋 Create plan
        run: |
          cd infrastructure
          tofu plan -out=tfplan \
            -var="cluster_name=auth-stack-${{ github.event.inputs.environment || 'staging' }}" \
            -var="node_count=2" \
            -var="node_size=s-2vcpu-4gb"

      - name: 💾 Upload plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ github.sha }}
          path: infrastructure/tfplan
          retention-days: 5

      - name: 📊 Plan summary
        run: |
          cd infrastructure
          echo "## 🏗️ Infrastructure Plan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Environment: ${{ github.event.inputs.environment || 'staging' }}" >> $GITHUB_STEP_SUMMARY
          echo "### Cluster: auth-stack-${{ github.event.inputs.environment || 'staging' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          tofu show -no-color tfplan >> $GITHUB_STEP_SUMMARY

  apply:
    name: 🚀 Apply Infrastructure Changes
    runs-on: ubuntu-latest
    needs: [validate, plan]
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    environment: 
      name: ${{ github.event.inputs.environment || 'staging' }}
      url: https://cloud.digitalocean.com/kubernetes/clusters
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: ${{ env.TOFU_VERSION }}

      - name: 🏗️ Initialize OpenTofu
        run: |
          cd infrastructure
          tofu init

      - name: 📋 Plan infrastructure
        run: |
          cd infrastructure
          tofu plan -out=tfplan \
            -var="cluster_name=auth-stack-${{ github.event.inputs.environment || 'staging' }}" \
            -var="node_count=2" \
            -var="node_size=s-2vcpu-4gb"

      - name: 🚀 Apply infrastructure
        run: |
          cd infrastructure
          tofu apply -auto-approve tfplan

      - name: 📤 Export kubeconfig
        run: |
          cd infrastructure
          tofu output -raw kubeconfig > kubeconfig.yaml

      - name: 💾 Upload kubeconfig
        uses: actions/upload-artifact@v4
        with:
          name: kubeconfig-${{ github.event.inputs.environment || 'staging' }}-${{ github.sha }}
          path: infrastructure/kubeconfig.yaml
          retention-days: 30

      - name: 📊 Apply summary
        run: |
          cd infrastructure
          echo "## 🎉 Infrastructure Applied Successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🏗️ Resources Created:" >> $GITHUB_STEP_SUMMARY
          tofu output -json | jq -r 'to_entries[] | "- **\(.key)**: \(.value.value)"' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Download the kubeconfig artifact" >> $GITHUB_STEP_SUMMARY
          echo "2. Configure kubectl: \`export KUBECONFIG=kubeconfig.yaml\`" >> $GITHUB_STEP_SUMMARY
          echo "3. Deploy applications: \`./deploy-monitoring.sh\`" >> $GITHUB_STEP_SUMMARY

  deploy-apps:
    name: 📦 Deploy Applications to New Cluster
    runs-on: ubuntu-latest
    needs: apply
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📥 Download kubeconfig
        uses: actions/download-artifact@v4
        with:
          name: kubeconfig-${{ github.event.inputs.environment || 'staging' }}-${{ github.sha }}
          path: .

      - name: 🔧 Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.28.0'

      - name: 🔧 Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.14.0'

      - name: ⚙️ Configure kubectl
        run: |
          export KUBECONFIG=kubeconfig.yaml
          kubectl cluster-info

      - name: 📊 Deploy monitoring stack
        run: |
          export KUBECONFIG=kubeconfig.yaml
          
          # Add Helm repositories
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo update
          
          # Deploy monitoring
          cd helm/monitoring-stack
          helm dependency update
          cd ../..
          
          helm upgrade --install monitoring-stack helm/monitoring-stack \
            --namespace monitoring \
            --create-namespace \
            --wait \
            --timeout 10m

      - name: 🎯 Deploy auth-stack
        run: |
          export KUBECONFIG=kubeconfig.yaml
          
          helm upgrade --install auth-stack helm/auth-stack \
            --namespace auth-app \
            --create-namespace \
            --set monitoring.enabled=true \
            --wait \
            --timeout 10m

      - name: 📊 Deployment summary
        run: |
          export KUBECONFIG=kubeconfig.yaml
          
          echo "## 🎉 Applications Deployed Successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Deployed Applications:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Monitoring Stack (Prometheus + Grafana)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Auth Stack (Frontend + Backend + Database)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Access Information:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Set kubeconfig" >> $GITHUB_STEP_SUMMARY
          echo "export KUBECONFIG=kubeconfig.yaml" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Access Grafana" >> $GITHUB_STEP_SUMMARY
          echo "kubectl port-forward -n monitoring svc/monitoring-stack-grafana 3001:80" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Access your application" >> $GITHUB_STEP_SUMMARY
          echo "kubectl port-forward -n auth-app svc/frontend-service 8080:8080" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  destroy:
    name: 💥 Destroy Infrastructure
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    environment: 
      name: ${{ github.event.inputs.environment }}-destroy
      url: https://cloud.digitalocean.com/kubernetes/clusters
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: ${{ env.TOFU_VERSION }}

      - name: 🏗️ Initialize OpenTofu
        run: |
          cd infrastructure
          tofu init

      - name: 💥 Destroy infrastructure
        run: |
          cd infrastructure
          tofu destroy -auto-approve \
            -var="cluster_name=auth-stack-${{ github.event.inputs.environment }}" \
            -var="node_count=2" \
            -var="node_size=s-2vcpu-4gb"

      - name: 📊 Destroy summary
        run: |
          echo "## 💥 Infrastructure Destroyed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Environment: ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "### Status: ✅ Successfully destroyed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All resources have been removed from DigitalOcean." >> $GITHUB_STEP_SUMMARY
