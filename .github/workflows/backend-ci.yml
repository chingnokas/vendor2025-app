name: 🚀 Backend CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/backend

jobs:
  backend-ci:
    name: 🔧 Backend Build & Deploy
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      packages: write
      id-token: write
      security-events: write

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔧 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: 📦 Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: 🔍 Lint code
        working-directory: ./backend
        run: npm run lint

      - name: 🧪 Run unit tests
        working-directory: ./backend
        run: npm test

      - name: 📊 Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

      - name: 🧪 Run integration tests
        working-directory: ./backend
        run: npm run test:integration
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_USER: root
          DB_PASSWORD: root
          DB_NAME: test_db
          JWT_SECRET: test-jwt-secret

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🔨 Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: 🔍 Security scan with Trivy
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: 📊 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 🔄 Update Helm values
        if: github.ref == 'refs/heads/main'
        run: |
          echo "ℹ️ Helm values will be updated by full-stack-ci.yml workflow"
          echo "🏷️ Backend image built: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }}"
          echo "📡 ArgoCD will automatically detect and pull these changes"

      - name: 🎯 Trigger ArgoCD sync (optional)
        if: github.ref == 'refs/heads/main'
        run: |
          echo "🔄 Backend image updated to: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }}"
          echo "📡 ArgoCD will automatically detect and pull these changes"
          
          # Uncomment below if you have ArgoCD API access configured
          # curl -X POST \
          #   -H "Authorization: Bearer ${{ secrets.ARGOCD_TOKEN }}" \
          #   -H "Content-Type: application/json" \
          #   "${{ secrets.ARGOCD_SERVER }}/api/v1/applications/auth-stack-frontend/sync" \
          #   -d '{"prune": false, "dryRun": false, "strategy": {"hook": {"force": false}}}'
